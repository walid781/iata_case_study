AWSTemplateFormatVersion: 2010-09-09
Parameters:
  deploymentBucket:
    Description: Name of the deployment bucket
    Type: String
  lambdaZipPath:
    Description: path of lambda package
    Type: String

Mappings:
  nameing:
    lambda:
      prefix: lambda-cdf-iata-cs
    role:
      prefix: role-cdf-iata-cs
    policy:
      prefix: policy-cdf-iata-cs
    dataBucket:
      name:  s3-cdf-walid-iata-case-study



Description: The AWS CloudFormation template for this Serverless application
Resources:
  # DataDashingestionLogGroup:
  #   Type: 'AWS::Logs::LogGroup'
  #   Properties:
  #     LogGroupName: /aws/lambda/lambda-iata-cs-data-ingestion
  # DataDashextractionLogGroup:
  #   Type: 'AWS::Logs::LogGroup'
  #   Properties:
  #     LogGroupName: /aws/lambda/lambda-iata-cs-data-extraction
  LambdaDataIngestion:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref deploymentBucket
        S3Key: !Ref lambdaZipPath
      Handler: data_ingestion.handler.lambda_handler
      Runtime: python3.11
      FunctionName: !Sub 
        - '${lambda_prefix}-data-ingestion'
        - lambda_prefix: !FindInMap [ nameing, lambda, prefix]
  
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !FindInMap [ nameing, dataBucket, name]
          ZIP_PATH: ZIP/
          RAW_PATH: RAW/
          CLEANED_PATH: CLEANED/
          LOG_LEVEL: INFO
      Role: !GetAtt 
        - lambdaRole
        - Arn
      Layers:
        - arn:aws:lambda:eu-central-1:336392948345:layer:AWSSDKPandas-Python311:2
    DependsOn:
      - lambdaRole

  LambdaDataExtraction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref deploymentBucket
        S3Key: !Ref lambdaZipPath
      Handler: data_extraction.handler.lambda_handler
      Runtime: python3.11
      FunctionName: !Sub 
        - '${lambda_prefix}-data-extraction'
        - lambda_prefix: !FindInMap [ nameing, lambda, prefix]
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !FindInMap [ nameing, dataBucket, name]
          ZIP_PATH: ZIP/
          RAW_PATH: RAW/
          CLEANED_PATH: CLEANED/
          LOG_LEVEL: INFO
          GLUE_CRAWLER_TRIGGER: !Ref GlueCrawlerTrigger
      Role: !GetAtt 
        - lambdaRole
        - Arn
      Layers:
        - arn:aws:lambda:eu-central-1:336392948345:layer:AWSSDKPandas-Python311:2
    DependsOn:
      - lambdaRole

  
  ExtractionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      # Effect: Allow
      Action: 'lambda:*'
      FunctionName: !GetAtt
        - LambdaDataExtraction
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt
        - S3Bucket
        - Arn


  LambdaDataTransformation:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref deploymentBucket
        S3Key: !Ref lambdaZipPath
      Handler: data_transformation.handler.lambda_handler
      Runtime: python3.11
      FunctionName: !Sub 
        - '${lambda_prefix}-data-transformation'
        - lambda_prefix: !FindInMap [ nameing, lambda, prefix]
      MemorySize: 2048
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !FindInMap [ nameing, dataBucket, name]
          ZIP_PATH: ZIP/
          RAW_PATH: RAW/
          CLEANED_PATH: CLEANED/
          PARQUET_PATH: PARQUET/
          LOG_LEVEL: INFO
      Role: !GetAtt 
        - lambdaRole
        - Arn
      Layers:
        - arn:aws:lambda:eu-central-1:336392948345:layer:AWSSDKPandas-Python311:2
    DependsOn:
      - lambdaRole

  
  TransformationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      # Effect: Allow
      Action: 'lambda:*'
      FunctionName: !GetAtt
        - LambdaDataTransformation
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt
        - S3Bucket
        - Arn

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [ nameing, dataBucket, name]
      VersioningConfiguration:
        Status: Suspended
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt
              - LambdaDataExtraction
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: ZIP/
                  - Name: suffix
                    Value: .zip
          - Event: s3:ObjectCreated:*
            Function: !GetAtt
              - LambdaDataTransformation
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: RAW/
                  - Name: suffix
                    Value: .csv
    DeletionPolicy: Retain
  
  

  lambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 
        - '${role_prefix}-lambda-role'
        - role_prefix: !FindInMap [ nameing, role, prefix]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: !Sub 
          - '${policy_prefix}-s3-data-access'
          - policy_prefix: !FindInMap [ nameing, policy, prefix]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub 
                    - 'arn:aws:s3:::${dataBucket}'
                    - dataBucket: !FindInMap [ nameing, dataBucket, name]
                  - !Sub 
                    - 'arn:aws:s3:::${dataBucket}/*'
                    - dataBucket: !FindInMap [ nameing, dataBucket, name]
        - PolicyName: !Sub 
          - '${policy_prefix}-start-glue-trigger'
          - policy_prefix: !FindInMap [ nameing, policy, prefix]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'glue:StartTrigger'
                Resource: 
                  - !Sub 
                    - 'arn:aws:glue:*:*:trigger/${triggerName}'
                    - triggerName: !Ref GlueCrawlerTrigger
                




  GlueRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 
        - '${role_prefix}-glue-role'
        - role_prefix: !FindInMap [ nameing, role, prefix]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: !Sub 
          - '${policy_prefix}-s3-data-access'
          - policy_prefix: !FindInMap [ nameing, policy, prefix]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub 
                    - 'arn:aws:s3:::${dataBucket}'
                    - dataBucket: !FindInMap [ nameing, dataBucket, name]
                  - !Sub 
                    - 'arn:aws:s3:::${dataBucket}/*'
                    - dataBucket: !FindInMap [ nameing, dataBucket, name]
                  - !Sub 
                    - 'arn:aws:s3:::${deploymentBucket}'
                    - deploymentBucket: !Ref deploymentBucket
                  - !Sub 
                    - 'arn:aws:s3:::${deploymentBucket}/*'
                    - deploymentBucket: !Ref deploymentBucket

  

  


    
# GlueCrawler:
#     Type: AWS::Glue::Crawler
#     Properties:
#       # Classifiers: 
#       #   - String
#       # Configuration: String
#       # CrawlerSecurityConfiguration: String
#       DatabaseName: iata-case-study
#       Description: Load Raw data
#       Name: iata-case-study-crawler
#       # RecrawlPolicy: 
#       #   RecrawlPolicy
#       Role: !GetAtt 
#         - GlueRole
#         - Arn
#       # Schedule: 
#       #   Schedule
#       # SchemaChangePolicy: 
#       #   SchemaChangePolicy
#       TablePrefix: table_iata

#       Targets:
#         S3Targets:
#           - Path: !Sub 
#             - 's3://${dataBucket}/RAW'
#             - dataBucket: !FindInMap [ nameing, dataBucket, name]

  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      # Classifiers: 
      #   - String
      # Configuration: String
      # CrawlerSecurityConfiguration: String
      DatabaseName: iata-case-study
      Description: Load Raw data
      Name: iata-case-study-crawler-cdf
      # RecrawlPolicy: 
      #   RecrawlPolicy
      Role: !GetAtt 
        - GlueRole
        - Arn
      # Schedule: 
      #   Schedule
      # SchemaChangePolicy: 
      #   SchemaChangePolicy
      TablePrefix: table_iata

      Targets:
        S3Targets:
          - Path: !Sub 
            - 's3://${dataBucket}/RAW'
            - dataBucket: !FindInMap [ nameing, dataBucket, name]

  # GlueCsvToParquetJob:
  #   Type: AWS::Glue::Job
  #   Properties:
  #     # AllocatedCapacity: Number
  #     Command: 
  #         Name: glueetl
  #         PythonVersion: 3
  #         ScriptLocation: !Sub 
  #           - 's3://${deploymentBucket}/ETL/csv_to_parquet.py'
  #           - deploymentBucket: !Ref deploymentBucket

  #     # Connections: 
  #     #   ConnectionsList
  #     DefaultArguments: 
  #       --dataBucket: !FindInMap [ nameing, dataBucket, name]
  #       --dataBase: iata-case-study
  #       --csvTable: table_iataraw
  #       --toto: titi
  #       --enable-metrics: true
  #       --enable-spark-ui: true
  #       --enable-job-insights: true
  #       --enable-glue-datacatalog: true
  #       --enable-continuous-cloudwatch-log: true
  #       --job-language: python
  #       --job-bookmark-option: job-bookmark-disable
  #       --spark-event-logs-path: s3://s3-iata-case-study-deployment-bucket/sparkHistoryLogs/
  #       --TempDir: s3://s3-iata-case-study-deployment-bucket/temporary/
  #     Description: Transform csv table to parquet
  #     ExecutionClass: STANDARD
  #     ExecutionProperty: 
  #       MaxConcurrentRuns: 1
  #     GlueVersion: 4.0
  #     # LogUri: String
  #     MaxCapacity: 1
  #     # MaxRetries: Number
  #     Name: csv_to_parquet
  #     # NonOverridableArguments: Json
  #     # NotificationProperty: 
  #     #   NotificationProperty
  #     # NumberOfWorkers: 2
  #     Role: !GetAtt 
  #       - GlueRole
  #       - Arn
  #     # SecurityConfiguration: String
  #     # Tags: 
  #     #   - Tag
  #     Timeout: 30
  #     # WorkerType: G.025X

  GlueCsvToParquetJob:
    Type: AWS::Glue::Job
    Properties:
      # AllocatedCapacity: Number
      Command: 
          Name: glueetl
          PythonVersion: 3
          ScriptLocation: !Sub 
            - 's3://${deploymentBucket}/ETL/csv_to_parquet.py'
            - deploymentBucket: !Ref deploymentBucket

      # Connections: 
      #   ConnectionsList
      DefaultArguments: 
        --dataBucket: !FindInMap [ nameing, dataBucket, name]
        --dataBase: iata-case-study
        --csvTable: table_iataraw
        --toto: titi
        --enable-metrics: true
        --enable-spark-ui: true
        --enable-job-insights: true
        --enable-glue-datacatalog: true
        --enable-continuous-cloudwatch-log: true
        --job-language: python
        --job-bookmark-option: job-bookmark-disable
        --spark-event-logs-path: s3://s3-iata-case-study-deployment-bucket/sparkHistoryLogs/
        --TempDir: s3://s3-iata-case-study-deployment-bucket/temporary/
      Description: Transform csv table to parquet
      ExecutionClass: STANDARD
      ExecutionProperty: 
        MaxConcurrentRuns: 1
      GlueVersion: 4.0
      # LogUri: String
      MaxCapacity: 1
      # MaxRetries: Number
      Name: job_csv_to_parquet_cdf
      # NonOverridableArguments: Json
      # NotificationProperty: 
      #   NotificationProperty
      # NumberOfWorkers: 2
      Role: !GetAtt 
        - GlueRole
        - Arn
      # SecurityConfiguration: String
      # Tags: 
      #   - Tag
      Timeout: 30
      # WorkerType: G.025X
      
      
  GlueWorkflow:
    Type: AWS::Glue::Workflow
    Properties:
    #   DefaultRunProperties: Json
    #   Description: String
      MaxConcurrentRuns: 1
      Name: glue-workflow-cdf
  

  GlueJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Actions: 
        - JobName: !Ref GlueCsvToParquetJob
          # CrawlerName: !Ref GlueCrawler
          
      Description: Trigger Glue job on success of crawler
      # EventBatchingCondition: 
      #   EventBatchingCondition
      Name: GlueCsvToParquetJobTrigger
      Predicate: 
          Conditions: 
            - CrawlerName: !Ref GlueCrawler
              CrawlState: SUCCEEDED
              # JobName: String
              LogicalOperator: EQUALS
              # State: SUCCEEDED
          Logical: ANY

      # Schedule: String
      StartOnCreation: true
      # Tags: 
      #   - Tag
      Type: CONDITIONAL 
      WorkflowName: !Ref GlueWorkflow
      
  GlueCrawlerTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Actions: 
        - CrawlerName: !Ref GlueCrawler
          
      Description: Trigger Glue crawler
      # EventBatchingCondition: 
      #   EventBatchingCondition
      Name: TrigCrawlerOnDemand

      # Schedule: String
      # StartOnCreation: Boolean
      # Tags: 
      #   - Tag
      Type: ON_DEMAND  
      WorkflowName: !Ref GlueWorkflow


Outputs:
  ServerlessDeploymentBucketName:
    Value: s3-iata-case-study-deployment-bucket
    Export:
      Name: cdf-iata-case-study-dev-ServerlessDeploymentBucketName

